pipeline {
  agent {
    kubernetes {
      label 'petclinic-cd'
      yamlFile 'jenkins-agent-pod.yaml'
    }
  }

  environment {
    GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    REGISTRY_URL = '3.35.252.125:8000'
    REGISTRY_CREDENTIALS = 'harbor-docker-registry'
    APP_IMAGE = null
    IMAGE_REPO = 'petclinic'
    IMAGE_NAME = 'spring-petclinic-angular'
    IMAGE_TAG = sh(returnStdout: true, script: '(git rev-parse --short HEAD && echo "_$BUILD_NUMBER") | tr -d "\n"').trim()
    //IMAGE_TAG = '${GIT_COMMIT_SHORT}_${BUILD_NUMBER}'
    //APP_URL = 'http://ad12a9b6589314bbba69faa5d946fd36-d076dbf22622104f.elb.ap-northeast-2.amazonaws.com/petclinic'
    //APP_PORT = 80
    //PerfURL='ad12a9b6589314bbba69faa5d946fd36-d076dbf22622104f.elb.ap-northeast-2.amazonaws.com'
    //ArgoURL='a1544b5071c974437a5dd178c5915a67-897828852.ap-northeast-2.elb.amazonaws.com'
    //argocdAppPrefix='petclinic-argocd-helm'
    //appWaitTimeout = 600    
  }

  stages {
    // stage('Build') {
    //   steps {
    //     container('maven') {
    //       sh 'mvn clean compile'
    //     }
    //   }
    // }
    // stage('Unit Test') {
    //   steps {
    //     container('maven') {
    //       sh 'mvn test'
    //     }
    //   }
    //   post {
    //     always {
    //       junit 'target/surefire-reports/*.xml'
    //       step([ $class: 'JacocoPublisher' ])
    //     }
    //   }
    // }
    // stage('Static Code Analysis') {
    //   steps {
    //     configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
    //       container('maven') {
    //         sh 'mvn sonar:sonar -s $MAVEN_SETTINGS'
    //       }
    //     }
    //   }
    // }  
    // stage('Package') {
    //   steps {
    //     container('maven') {
    //       sh 'mvn clean package -DskipTests'
    //       archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
    //     }
    //   }
    // }
    stage('Build Docker image') {
      steps {
        container('docker') {
          script {
            APP_IMAGE = docker.build("${IMAGE_REPO}/${IMAGE_NAME}:${IMAGE_TAG}", "-f Dockerfile .")
          }
        }
      }
    }
    stage('Push Docker image') {
      steps {
        container('docker') {
          script {
            docker.withRegistry('http://' + REGISTRY_URL, REGISTRY_CREDENTIALS) {
              APP_IMAGE.push()
              APP_IMAGE.push('latest')
            }
          }
        }
      }
    }
    // stage('Update manifest') {
    //   steps {
    //     sh """
    //       git config --global user.name 'skcc-devops02'
    //       git config --global user.email 'skcc.devops02@sk.com'
    //       git config --global credential.helper cache
    //       git config --global push.default simple
    //     """
    //     git url: 'https://github.com/skcc-devops02/petclinic-argo-helm.git',
	//           credentialsId: 'skcc-devops02-github',
    //         branch: 'main'
    //     sh """
    //       sed -i 's/tag:.*/tag: "${GIT_COMMIT_SHORT}_${BUILD_NUMBER}"/g' ./values.yaml
    //       git add values.yaml
    //       git commit -m 'Update Docker image tag: ${GIT_COMMIT_SHORT}_${BUILD_NUMBER}'
    //       git push origin main
    //     """
    //   }
    // }
    
    //  stage('Argo'){
    //    steps {
    //      withCredentials([usernamePassword(credentialsId: 'argocd-credential-admin', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_AUTH_PWD')]) {
    //       container('argocd') {
    //               sh """
    //               yes | argocd login --insecure ${ArgoURL} --username ${ARGOCD_USER} --password ${ARGOCD_AUTH_PWD}
    //               argocd app sync ${argocdAppPrefix} --force
    //               argocd app wait ${argocdAppPrefix} --timeout ${appWaitTimeout}
    //               argocd logout ${ArgoURL}
    //               sleep 20
    //               """
    //         }
    //      }
    //    }
    //  }
    
    
    //  stage('PerforfmanceTest') {
    //   steps {
    //     withCredentials([usernamePassword(credentialsId: 'skcc-devops02-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PWD')]) {
    //         container('jmeter') {
    //             sh "git checkout origin/master"
    //             sh "git config remote.origin.url https://${GIT_USER}:${GIT_PWD}@github.com/skcc-devops02/spring-petclinic-rest.git"
    //             sh "git config --global user.email 'skcc.devops02@sk.com'"
    //             sh "git config --global user.name 'skcc-devops02'"

    //             echo 'jmeter 명령어 실행'

    //         sh """
    //            JVM_ARGS="-Xms1G -Xmx1G" && export JVM_ARGS && /usr/local/jmeter/apache-jmeter-5.4.1/bin/jmeter.sh \
    //            -n -f -t PerformanceTest/TS01_TC01_AWSPipeline.jmx -Jurl=${PerfURL} \
    //            -l PerformanceTest/TestResult/Result_${BUILD_NUMBER}.jtl \
    //            -e -o PerformanceTest/TestResult/Result_html_${BUILD_NUMBER}
    //            mv jmeter.log PerformanceTest/TestResult/Result_html_${BUILD_NUMBER}/jmeter.log
    //            git add . && git commit -m 'Publish Jmeter result' && git push origin HEAD:master
    //         """
    //      }
    //     }
    //   }
    //    post {
    //      always {
    //      perfReport 'PerformanceTest/TestResult/Result_${BUILD_NUMBER}.jtl'
    //      }
    //    }
    //  } 
     
    // stage('API Test') {
    //   steps {
    //     container('newman') {
          
    //       //git url: 'https://github.com/skcc-devops02/spring-petclinic-rest.git',
    //       //        credentialsId: 'skcc-devops02-github',
    //       //          branch: 'master'
                    
    //       sh """
    //         newman run petclinic.postman_collection3.json \
    //               --env-var 'baseUrl=${APP_URL}' \
    //               --reporters cli,junit \
    //               --reporter-junit-export 'petclinic-report.xml'
    //       """
    //     }
    //   }
    //   post {
    //     always {
    //       junit 'petclinic-report.xml'
    //     }
    //   }
    // }    
  }
}
